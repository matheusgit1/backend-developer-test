org: mapdev
service: trigger-events

frameworkVersion: "3"

plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs20.x
  region: ${file(./values.yml):${self:provider.stage}.REGIAO}
  stage: ${opt:stage,'develop'}
  tracing:
    lambda: true
  vpc:
    securityGroupIds:
      - ${file(./values.yml):${self:provider.stage}.SECURITY_GROUP_API}
    subnetIds:
      - ${file(./values.yml):${self:provider.stage}.SUBNET1}
      - ${file(./values.yml):${self:provider.stage}.SUBNET2}
  environment:
    TZ: ${file(./values.yml):${self:provider.stage}.TZ}
    DB_HOST: ${ssm:/${self:provider.stage}/trigger-jobs/db-host}
    DB_USER: ${ssm:/${self:provider.stage}/trigger-jobs/db-user}
    DB_NAME: ${ssm:/${self:provider.stage}/trigger-jobs/db-name}
    DB_PASSWORD: ${ssm:/${self:provider.stage}/trigger-jobs/db-password}
    URL_OPEN_AI: ${ssm:/${self:provider.stage}/trigger-jobs/ulr-open-ai}
    KEY_OPEN_AI: ${ssm:/${self:provider.stage}/trigger-jobs/api-key-open-ai}
    MOCK_CALL_OPEN_AI: ${file(./values.yml):${self:provider.stage}.MOCK_CALL_OPEN_AI}
    MOCK_CALL_OPEN_AI_RESPONSE: ${file(./values.yml):${self:provider.stage}.MOCK_CALL_OPEN_AI_RESPONSE}
    BUCKET_FEED_NAME: ${file(./values.yml):${self:provider.stage}.BUCKET_FEED_NAME}
    BUCKET_FEED_FILE_KEY: ${file(./values.yml):${self:provider.stage}.BUCKET_FEED_FILE_KEY}
    BUCKET_FEED_CLIENT_FILE_KEY: ${file(./values.yml):${self:provider.stage}.BUCKET_FEED_CLIENT_FILE_KEY}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
          Resource:
            - { "Fn::GetAtt": ["EventsQueue", "Arn"] }

        - Effect: Allow
          Action:
            - "s3:*"
          Resource:
            - arn:aws:s3:::${file(./values.yml):${self:provider.stage}.BUCKET_FEED_NAME}/*

package:
  individually: false

custom:
  package: ${file(package.json)}
  webpack:
    webpackConfig: "webpack.config.js"
    excludeFiles:
      - "**/*.spec.ts"
      - "**/*.ispec.ts"
  # bundle:
  #   externals:
  #     - axios

functions:
  handlerNotificationEvents:
    name: trigger-events-${self:provider.stage}
    handler: src/index._eventListenner
    memorySize: 1024
    timeout: 30 #tempo em segundos
    # reservedConcurrency: 10
    events:
      - sqs:
          arn:
            Fn::GetAtt: ["EventsQueue", "Arn"]
          batchSize: 10
          # functionResponseType: ReportBatchItemFailures

  handlerUpdateFeedJob:
    name: trigger-update-feed-job-${self:provider.stage}
    handler: src/index._triggerUpdateFeedJobseventBridge
    memorySize: 1024
    timeout: 30 #tempo em segundos
    # reservedConcurrency: 10
    events:
      - eventBridge:
          schedule: rate(30 minutes)

resources:
  Resources:
    EventsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.package.name}-${self:provider.stage}-events-queue
        VisibilityTimeout: 900
        MessageRetentionPeriod: 86400
        ReceiveMessageWaitTimeSeconds: 20
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - EventsQueueDLQ
              - Arn
          maxReceiveCount: 3
    EventsQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.package.name}-${self:provider.stage}-events-queue-dlq
        VisibilityTimeout: 900
        MessageRetentionPeriod: 86400
        ReceiveMessageWaitTimeSeconds: 20

    # SQS-SNS Publicar um job
    SNSSubscriptionPublishJobEvent:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: { "Fn::GetAtt": ["EventsQueue", "Arn"] }
        TopicArn:
          Fn::Join:
            - ":"
            - - "arn:aws:sns"
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - "event_publish_job"

    # SQS-SNS Um job foi editado
    SNSSubscriptionEditJobEvent:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: { "Fn::GetAtt": ["EventsQueue", "Arn"] }
        TopicArn:
          Fn::Join:
            - ":"
            - - "arn:aws:sns"
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - "event_edit_job"

    SNSSubscriptionDeleteJobEvent:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: { "Fn::GetAtt": ["EventsQueue", "Arn"] }
        TopicArn:
          Fn::Join:
            - ":"
            - - "arn:aws:sns"
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - "event_delete_job"

    # Allow SNS to send messages to SQS
    EventsQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - { Ref: EventsQueue }
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: allow-sns-messages
              Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource:
                Fn::GetAtt:
                  - EventsQueue
                  - Arn
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    Fn::Join:
                      - ":"
                      - - arn
                        - aws
                        - sns
                        - Ref: AWS::Region
                        - Ref: AWS::AccountId
                        - event_*
